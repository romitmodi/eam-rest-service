create table if not exists public.budetails
(
    id      bigint generated always as identity
        constraint budetails_pk
            primary key,
    bu_name varchar(255) not null
);

alter table public.budetails
    owner to postgres;

create table if not exists public.labdetails
(
    id      bigint generated always as identity
        constraint labdetails_pk
            primary key,
    labname varchar(255) not null,
    bu_id   bigint       not null
        constraint labdetails_budetails_bu_id_fk
            references public.budetails
);

alter table public.labdetails
    owner to postgres;

create table if not exists public.teamdetails
(
    id       bigint generated always as identity
        constraint teamdetails_pk
            primary key,
    teamname varchar(255) not null,
    el_id    bigint,
    labid    bigint       not null
        constraint teamdetails_labdetails_labid_fk
            references public.labdetails
);

alter table public.teamdetails
    owner to postgres;

create table if not exists public.employee
(
    id       bigint generated always as identity
        constraint employee_pk
            primary key,
    empname  varchar(255) not null,
    role_id  integer      not null,
    teamid   bigint       not null
        constraint employee_teamdetails_teamid_fk
            references public.teamdetails,
    email    varchar(255),
    password varchar(255),
    constraint uk_empid
        unique (id, role_id, teamid)
);

alter table public.employee
    owner to postgres;

create table if not exists public.requestdetails
(
    id                bigint generated by default as identity
        constraint requests_pkey
            primary key,
    req_created_by    bigint not null
        constraint requestdetails_employee_id_fk
            references public.employee,
    status            varchar(255),
    approver_id       bigint,
    requestor_role    varchar(255),
    requestor_team_id bigint
);

alter table public.requestdetails
    owner to postgres;

create table if not exists public.role
(
    role_id integer generated by default as identity
        primary key,
    name    varchar(255)
        constraint role_name_check
            check ((name)::text = ANY
                   ((ARRAY ['ROLE_USER'::character varying, 'ROLE_ADMIN'::character varying])::text[]))
);

alter table public.role
    owner to postgres;

create table if not exists public.users
(
    id       bigint generated by default as identity
        primary key,
    email    varchar(255),
    password varchar(255),
    name     varchar(255)
);

alter table public.users
    owner to postgres;

create table if not exists public.role_users
(
    id      bigint  not null
        constraint fkmaow79o55vydx1tovbppotf9k
            references public.users,
    role_id integer not null
        constraint fkele6ufqrv6w1uoxqw6h1vkki0
            references public.role,
    primary key (id, role_id)
);

alter table public.role_users
    owner to postgres;

create table if not exists public.ticketdetails
(
    id            bigint generated always as identity
        constraint requestticketdetails_pk
            primary key,
    request_id    bigint not null
        constraint requestticketdetails_requestdetails_id_fk
            references public.requestdetails,
    ticket_status varchar(255),
    url           varchar(255)
);

alter table public.ticketdetails
    owner to postgres;

create table if not exists public.emp_role
(
    id   bigint generated by default as identity
        primary key,
    name varchar(255)
);

alter table public.emp_role
    owner to postgres;

create table if not exists public.access_details
(
    access_id           serial
        primary key,
    channel             varchar(255),
    dependent_access_id integer,
    json_structure      jsonb,
    role_id             integer
        constraint fkef6662s9nt861d9hgqrysoojh
            references public.emp_role
);

alter table public.access_details
    owner to postgres;

create table if not exists public.request_table
(
    id      serial
        primary key,
    jira_id varchar(255),
    status  varchar(255)
);

alter table public.request_table
    owner to postgres;

